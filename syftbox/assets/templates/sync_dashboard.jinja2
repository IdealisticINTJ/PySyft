<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sync Items Dashboard</title>
  <!-- Include Grid.js CSS -->
  <link
    href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css"
    rel="stylesheet"
  />
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
    }
    h1 {
      text-align: center;
    }
    #wrapper {
      margin-top: 20px;
    }
    .label {
      border-radius: 4px;
      padding: 6px 4px;
      white-space: nowrap;
      overflow: hidden;
      line-height: 1.2;
      font-family: monospace;
    }
    /* Provided color classes */
    .label-light-purple {
      background-color: #c9cfe8;
      color: #373b7b;
    }
    .label-light-blue {
      background-color: #c2def0;
      color: #1f567a;
    }
    .label-orange {
      background-color: #fee9cd;
      color: #b8520a;
    }
    .label-gray {
      background-color: #ecebef;
      color: #353243;
    }
    .label-green {
      background-color: #d5f1d5;
      color: #256b24;
    }
    .label-red {
      background-color: #f2d9de;
      color: #9b2737;
    }
    .badge-blue {
      background-color: #c2def0;
      color: #1f567a;
    }
  </style>
</head>
<body>
  <h1>Sync Items Dashboard</h1>
  <div id="wrapper"></div>

  <!-- Include Grid.js JS -->
  <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
  <script>
    // Function to generate a large dataset
    function generateData(count) {
      const statuses = ['completed', 'queued', 'errored', 'ignored', 'rejected'];
      const messages = {
        errored: 'Network error',
        ignored: 'File type not supported',
        rejected: 'Access denied'
      };
      const data = [];
      for (let i = 0; i < count; i++) {
        const status = statuses[Math.floor(Math.random() * statuses.length)];
        data.push({
          file_name: `user${(i % 100) + 1}/app_data/file${i + 1}.txt`,
          date: new Date(Date.now() - i * 60000).toISOString(),
          status: status,
          message: messages[status] || null
        });
      }
      return data;
    }

    // Generate a long list of data
    const data = generateData(1000);

    // Function to format date
    function formatDate(dateStr) {
      const options = {
        year: 'numeric', month: 'short', day: 'numeric',
        hour: 'numeric', minute: 'numeric', second: 'numeric',
        hour12: false,
        timeZone: 'UTC'
      };
      const date = new Date(dateStr);
      return date.toLocaleDateString('en-US', options);
    }

    // Function to map status to label classes
    function getStatusClass(status) {
      switch (status) {
        case 'completed':
          return 'label-green';
        case 'queued':
          return 'label-orange';
        case 'errored':
          return 'label-red';
        case 'ignored':
          return 'label-gray';
        case 'rejected':
          return 'label-red';
        default:
          return 'label-gray';
      }
    }

    // Sort data by date (newest first)
    const sortedData = data.sort((a, b) => new Date(b.date) - new Date(a.date));

    // Initialize Grid.js
    new gridjs.Grid({
      columns: [
        { id: 'file_name', name: 'File Name' },
        { id: 'date', name: 'Date' },
        {
          id: 'status',
          name: 'Status',
          formatter: (cell) => {
            const statusClass = getStatusClass(cell);
            return gridjs.html(`<span class="label ${statusClass}">${cell}</span>`);
          }
        },
        { id: 'message', name: 'Message' }
      ],
      data: sortedData.map(item => [
        item.file_name,
        formatDate(item.date),
        item.status,
        item.message || ''
      ]),
      search: true,
      resizable: true,
    }).render(document.getElementById('wrapper'));
  </script>
</body>
</html>